#!/usr/bin/env python

"""
runs tests
"""
import pytest
from pytest import approx
from datetime import datetime

def test_Flipchem():
    from flipchem import Flipchem

    expected = (19.588119506835938,118.02107897069808,-22.65814170352014,
                425978468750.0,52250906250.0,18525945312.5,2840931884.765625,
                403744110.1074219,1110899.625,39.76298141479492,98186.71643733978,2)

    date = datetime(2017,1,4,2)
    fc = Flipchem(date)

    glat = 74.72955
    glon = -94.90576
    alt = 190.0
    ne = 5.0e11
    te = ti = 600.
    outputs = fc.get_point(glat,glon,alt,ne,te,ti)
    for i in range(len(expected)):
        if isinstance(expected[i],bool):
            assert(expected[i] == outputs[i])
        else:
            assert(expected[i] == approx(outputs[i],nan_ok=True))

def test_Flipchem_fractions():
    from flipchem import Flipchem

    expected = (3.273433208465576,124.95449961982641,-22.97288535821079,
                0.926086125,0.0482425859375,0.02090298046875,0.0038885703125,
                0.000879680419921875,673794.6875,40.84779357910156,67122.4594116211,2)

    date = datetime(2018,1,1,2)
    fc = Flipchem(date)

    glat = 70
    glon = 20
    alt = 200
    ne = 5.0e11
    te = ti = 500
    outputs = fc.get_point(glat,glon,alt,ne,te,ti,fractions=True)
    print(outputs)
    for i in range(len(expected)):
        if isinstance(expected[i],bool):
            assert(expected[i] == outputs[i])
        else:
            assert(expected[i] == approx(outputs[i],nan_ok=True))

def test_Flipchem_altop():
    from flipchem import Flipchem

    expected = (3.273433208465576,124.95449961982641,-22.97288535821079,
                5.0e11,0,0,0,0,0,0,0)

    date = datetime(2018,1,1,2)
    fc = Flipchem(date,altop=150.0)

    glat = 70
    glon = 20
    alt = 200
    ne = 5.0e11
    te = ti = 500
    outputs = fc.get_point(glat,glon,alt,ne,te,ti)
    for i in range(len(expected)):
        if isinstance(expected[i],bool):
            assert(expected[i] == outputs[i])
        else:
            assert(expected[i] == approx(outputs[i],nan_ok=True))

def test_Flipchem_profile():
    from datetime import datetime
    import numpy as np
    import flipchem

    expected_op = np.array([2.55493618e-09, 5.38771717e-10, 2.96926923e-10, 3.32962405e-10,6.22769010e-10, 1.94113067e-08, 2.85559887e-03, 7.23962421e+00,1.43339287e+03, 5.42409122e+04, 5.78421772e+05, 2.57456970e+06,7.48892593e+06, 1.77435627e+07, 3.71286011e+07, 7.09224777e+07,1.28068573e+08, 2.20927124e+08, 3.66783051e+08, 5.89364624e+08,9.20745850e+08, 1.40364465e+09, 2.09405640e+09, 3.06405908e+09,4.40450732e+09, 6.22719873e+09, 8.66600977e+09, 1.18846533e+10,1.60421963e+10, 2.13316074e+10, 2.79446797e+10, 3.56951992e+10,4.30030312e+10, 4.71785469e+10, 4.91599609e+10, 5.25635742e+10,5.90743398e+10, 6.86573203e+10, 8.11905391e+10, 9.64656797e+10,1.14207578e+11, 1.34076516e+11, 1.55661109e+11, 1.78499656e+11,2.02106922e+11, 2.26003812e+11, 2.49739750e+11, 2.72903469e+11,2.95142906e+11, 3.16180031e+11, 3.35825906e+11, 3.53982000e+11,3.70629562e+11, 3.85809312e+11, 3.99592188e+11, 4.12056188e+11,4.23265500e+11, 4.33261344e+11, 4.42061281e+11, 4.49666250e+11,4.56072500e+11, 4.61281969e+11, 4.65311031e+11, 4.68193094e+11,4.69977812e+11, 4.70727938e+11, 4.70513750e+11, 4.69409156e+11,4.67487500e+11, 4.64820031e+11, 4.61473625e+11, 4.57511312e+11,4.52991438e+11, 4.47967969e+11, 4.42491281e+11, 4.36607812e+11,4.30361031e+11, 4.23791375e+11, 4.16936781e+11, 4.09832562e+11,4.02511844e+11, 3.95005750e+11, 3.87343562e+11, 3.79552406e+11,3.71657875e+11, 3.63683844e+11, 3.55652500e+11, 3.47584594e+11,3.39499312e+11, 3.31399562e+11, 3.23304562e+11, 3.15253344e+11,3.07258281e+11, 2.99330812e+11, 2.91481500e+11, 2.83719656e+11,2.76053781e+11, 2.68491562e+11, 2.61039844e+11, 2.53704594e+11])
    expected_o2p = np.array([3.03516722e+06, 4.79723978e+06, 8.55881882e+06, 1.53921995e+07,2.76285343e+07, 4.92150536e+07, 8.66877594e+07, 1.50617767e+08,2.57628235e+08, 4.31929871e+08, 7.02767395e+08, 1.11158093e+09,1.72341650e+09, 2.61871631e+09, 3.88502173e+09, 5.61208594e+09,7.90067969e+09, 1.08351367e+10, 1.44752285e+10, 1.88448691e+10,2.39247012e+10, 2.96506797e+10, 3.59182383e+10, 4.25905820e+10,4.95083555e+10, 5.64986016e+10, 6.33819062e+10, 6.99888984e+10,7.61187500e+10, 8.16106953e+10, 8.57402266e+10, 8.84779219e+10,8.90195859e+10, 8.91807734e+10, 9.17582031e+10, 9.56446875e+10,9.86045938e+10, 9.98037188e+10, 9.90314688e+10, 9.64733906e+10,9.24738438e+10, 8.73998359e+10, 8.16057734e+10, 7.54052812e+10,6.90641875e+10, 6.28015742e+10, 5.67942070e+10, 5.11899922e+10,4.60985391e+10, 4.15836250e+10, 3.76514844e+10, 3.42532109e+10,3.12966641e+10, 2.86662734e+10, 2.62489160e+10, 2.39511797e+10,2.17137500e+10, 1.95133770e+10, 1.73590859e+10, 1.52818418e+10,1.33209258e+10, 1.15134990e+10, 9.88544824e+09, 8.44908203e+09,7.20338330e+09, 6.13689697e+09, 5.23211719e+09, 4.46852441e+09,3.82571582e+09, 3.28460449e+09, 2.82842261e+09, 2.44279785e+09,2.11575098e+09, 1.83739160e+09, 1.59958521e+09, 1.39570923e+09,1.22032886e+09, 1.06899622e+09, 9.38042664e+08, 8.24435486e+08,7.25654480e+08, 6.39579407e+08, 5.64441284e+08, 4.98739197e+08,4.41199829e+08, 3.90736786e+08, 3.46420349e+08, 3.07452698e+08,2.73146454e+08, 2.45358627e+08, 2.23643723e+08, 2.03860992e+08,1.85827896e+08, 1.69383942e+08, 1.54383316e+08, 1.40715988e+08,1.28223068e+08, 1.16821320e+08, 1.06414627e+08, 9.69160843e+07])
    expected_nop = np.array([7.14176208e+08, 9.87399963e+08, 1.34587756e+09, 1.80994141e+09,2.40208008e+09, 3.14667920e+09, 4.06904077e+09, 5.19382178e+09,6.54276416e+09, 8.13273486e+09, 9.97743066e+09, 1.20793584e+10,1.44177939e+10, 1.69555840e+10, 1.96460879e+10, 2.24369102e+10,2.52578613e+10, 2.80476230e+10, 3.07593398e+10, 3.33694492e+10,3.58823320e+10, 3.83287227e+10, 4.07583242e+10, 4.32282578e+10,4.57906289e+10, 4.84812812e+10, 5.13119102e+10, 5.42465391e+10,5.72770742e+10, 6.03156641e+10, 6.38286172e+10, 6.79199766e+10,7.47342344e+10, 8.48911641e+10, 9.47577578e+10, 1.01994055e+11,1.07107461e+11, 1.10848422e+11, 1.13460586e+11, 1.14906422e+11,1.15075914e+11, 1.13909773e+11, 1.11435141e+11, 1.07767578e+11,1.03088953e+11, 9.76172109e+10, 9.15803594e+10, 8.51942734e+10,7.86536016e+10, 7.21255391e+10, 6.57478828e+10, 5.96269766e+10,5.38380039e+10, 4.84276055e+10, 4.34177227e+10, 3.88123242e+10,3.46032734e+10, 3.07759863e+10, 2.73128379e+10, 2.41947871e+10,2.14020430e+10, 1.89135449e+10, 1.67069395e+10, 1.47584160e+10,1.30434609e+10, 1.15373389e+10, 1.02161982e+10, 9.05749609e+09,8.04072168e+09, 7.14745557e+09, 6.36151465e+09, 5.66880176e+09,5.05714941e+09, 4.51610693e+09, 4.03669238e+09, 3.61121191e+09,3.23304858e+09, 2.89650415e+09, 2.59665112e+09, 2.32921460e+09,2.09047510e+09, 1.87717749e+09, 1.68647473e+09, 1.51586011e+09,1.36312500e+09, 1.22631775e+09, 1.10371228e+09, 9.93778381e+08,8.95157410e+08, 8.11282166e+08, 7.41287903e+08, 6.77216003e+08,6.18565735e+08, 5.64884277e+08, 5.15754883e+08, 4.70796295e+08,4.29667389e+08, 3.92047485e+08, 3.57644012e+08, 3.26189362e+08])
    expected_n2p = np.array([1.29340184e-09, 2.91516288e-10, 1.58577141e-10, 1.64537235e-10,2.72690849e-10, 6.24966372e-10, 2.99175615e-06, 3.18843831e-02,1.44974301e+01, 8.73288373e+02, 1.19890161e+04, 6.13250248e+04,1.93998605e+05, 4.87406313e+05, 1.07902217e+06, 2.19467521e+06,4.18903399e+06, 7.57645798e+06, 1.30736208e+07, 2.16419849e+07,3.45305405e+07, 5.33149872e+07, 7.99258728e+07, 1.16654427e+08,1.66122940e+08, 2.31204071e+08, 3.14878754e+08, 4.19727051e+08,5.48775818e+08, 7.03674316e+08, 8.90136658e+08, 1.15018970e+09,1.63806262e+09, 2.51492627e+09, 3.61041455e+09, 4.69567920e+09,5.73706592e+09, 6.76809180e+09, 7.79461475e+09, 8.79784473e+09,9.74457520e+09, 1.05982520e+10, 1.13260576e+10, 1.19036797e+10,1.23169453e+10, 1.25614658e+10, 1.26413057e+10, 1.25667578e+10,1.23529609e+10, 1.20183682e+10, 1.15833916e+10, 1.10687051e+10,1.04937754e+10, 9.87590137e+09, 9.22958887e+09, 8.56704102e+09,7.89871533e+09, 7.23429834e+09, 6.58311670e+09, 5.95407568e+09,5.35543408e+09, 4.79399463e+09, 4.27474365e+09, 3.80043164e+09,3.37177734e+09, 2.98761255e+09, 2.64553027e+09, 2.34220508e+09,2.07397266e+09, 1.83704675e+09, 1.62781226e+09, 1.44291064e+09,1.27933362e+09, 1.13442749e+09, 1.00587585e+09, 8.91685425e+08,7.90137817e+08, 6.99758057e+08, 6.19275330e+08, 5.47589172e+08,4.83755890e+08, 4.26912109e+08, 3.76335938e+08, 3.31372406e+08,2.91439728e+08, 2.56015045e+08, 2.24628967e+08, 1.96858902e+08,1.72322113e+08, 1.58406998e+08, 1.55897949e+08, 1.52886139e+08,1.49427460e+08, 1.45584839e+08, 1.41415298e+08, 1.36971039e+08,1.32320740e+08, 1.27509850e+08, 1.22585487e+08, 1.17590919e+08])
    expected_np = np.array([1.25983009e-10, 1.08385076e-09, 2.09798609e-08, 2.17515201e-07,1.42333161e-06, 6.73229181e-06, 2.54982545e-05, 9.40002631e-04,4.43782341e-01, 3.02409535e+01, 4.63224394e+02, 2.57997983e+03,8.63214396e+03, 2.23434344e+04, 5.00705019e+04, 1.02039114e+05,1.93506032e+05, 3.46365511e+05, 5.90995371e+05, 9.68459547e+05,1.53311372e+06, 2.35556841e+06, 3.52582359e+06, 5.15620518e+06,7.38358450e+06, 1.03701611e+07, 1.43020620e+07, 1.93652382e+07,2.58119392e+07, 3.38495216e+07, 4.40348434e+07, 6.00665970e+07,9.68735199e+07, 1.73183899e+08, 2.80088806e+08, 3.98106659e+08,5.24077881e+08, 6.63097961e+08, 8.19199951e+08, 9.94243530e+08,1.18764661e+09, 1.39660559e+09, 1.61636731e+09, 1.84101990e+09,2.06413013e+09, 2.27951440e+09, 2.48178345e+09, 2.66658813e+09,2.83101270e+09, 2.97373120e+09, 3.09516553e+09, 3.19734375e+09,3.28344531e+09, 3.35689087e+09, 3.42052295e+09, 3.47561133e+09,3.52149976e+09, 3.55551123e+09, 3.57361719e+09, 3.57157031e+09,3.54585474e+09, 3.49486450e+09, 3.41930444e+09, 3.32188550e+09,3.20683594e+09, 3.07913354e+09, 2.94382837e+09, 2.80543701e+09,2.66787842e+09, 2.53426270e+09, 2.40699951e+09, 2.28786743e+09,2.17814746e+09, 2.07871680e+09, 1.99010620e+09, 1.91261340e+09,1.84632275e+09, 1.79113916e+09, 1.74684241e+09, 1.71307275e+09,1.68941077e+09, 1.67528748e+09, 1.67014075e+09, 1.67330908e+09,1.68412585e+09, 1.70186536e+09, 1.72578638e+09, 1.75517505e+09,1.78928308e+09, 1.82752039e+09, 1.86504224e+09, 1.89970178e+09,1.93136060e+09, 1.95995544e+09, 1.98539893e+09, 2.00762622e+09,2.02664868e+09, 2.04242969e+09, 2.05494922e+09, 2.06420459e+09])
    expected_iters = np.array([3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])


    date = datetime(2017,1,4,18)
    fc = flipchem.Flipchem(date)
    
    glat = 74.72955
    glon = -94.90576
    alts = np.linspace(90,350,num=100)
    nes = 5.0e11*np.exp(1-(alts-250)/70-np.exp(-(alts-250)/70))
    tes = 2500*(1-np.exp(-(alts-90)/70))+300
    tis = 1750*(1-np.exp(-(alts-90)/70))+300
    
    Op = np.zeros((alts.shape))
    O2p = np.zeros((alts.shape))
    NOp = np.zeros((alts.shape))
    N2p = np.zeros((alts.shape))
    Np = np.zeros((alts.shape))
    iters = np.zeros((alts.shape))
    
    for i,(alt,ne,te,ti) in enumerate(zip(alts,nes,tes,tis)):
        outputs = fc.get_point(glat,glon,alt,ne,te,ti)
        Op[i] = outputs[3]
        O2p[i] = outputs[4]
        NOp[i] = outputs[5]
        N2p[i] = outputs[6]
        Np[i] = outputs[7]
        iters[i] = outputs[-1]

    for i in range(alts.size):
        assert(expected_op[i] == approx(Op[i],nan_ok=True))
        assert(expected_o2p[i] == approx(O2p[i],nan_ok=True))
        assert(expected_nop[i] == approx(NOp[i],nan_ok=True))
        assert(expected_n2p[i] == approx(N2p[i],nan_ok=True))
        assert(expected_np[i] == approx(Np[i],nan_ok=True))
        assert(expected_iters[i] == approx(iters[i],nan_ok=True))


if __name__ == '__main__':
    pytest.main(['-xrsv', __file__])

